import itertools
import json
import shutil
import sys
import time
import requests
import os
import xml.etree.ElementTree as ET

from multiprocessing import Pool, cpu_count

# iterate over the folder with the gt, get the name and add it to to colection name
# execute the method for each of this commands once
# save return json in list

BASE_FOLDER = '/Users/voegtlil/Documents/Datasets/003-DataSet/hisdoc_DS'
PXL_BASE_FOLDER = os.path.join(BASE_FOLDER, "ori_img")
XML_BASE_FOLDER = os.path.join(BASE_FOLDER, "xml_gt")
OUTPUT_PATH = './output'
# DS_COLLECTION_NAME = 'hisdoc_textline_gt'
# DS_COLLECTION_NAME = 'hisdoc_textline_output'
DS_COLLECTION_NAME = 'hisdoc_rgb_ori'


def get_file_list(dir):
    list = []
    for root, _, fnames in sorted(os.walk(dir)):
        for fname in fnames:
            if fname == ".DS_Store":
                continue
            list.append(fname)
    list.sort()
    return list


def pollResult(result_link):
    """ Polls for the result of the execution in 1s intervals
    Arguments:
        result_link {string} -- [the resultLink generated by the POST request that started the execution]
    Returns:
        [json] -- [the result of the execution]
    """

    response = json.loads(requests.request("GET", result_link).text)
    while response['status'] != 'done':
        if response['status'] == 'error':
            sys.stderr.write(
                'Error in executing the request. See the log file at: ' + response['output'][0]['file']['url'])
            raise Exception()
        time.sleep(1)
        response = json.loads(requests.request("GET", result_link).text)

    return response


def saveFile(url, filename, output_folder):
    """Saves a file from a URL into a local folder
    Arguments:
        url {string} -- The URL from where to download the file
        output_folder {string} -- The path to the output directory
    """

    # open in binary mode
    with open(os.path.join(output_folder, filename), "wb") as file:
        # get request
        response = requests.get(url)
        # write to file
        file.write(response.content)


def load_files(pxl_gt_path=PXL_BASE_FOLDER, xml_gt_path=XML_BASE_FOLDER):
    image_list = get_file_list(pxl_gt_path)
    xml_list = get_file_list(xml_gt_path)

    return image_list, xml_list


def execute(img, xml, hole_image):
    fileName = os.path.basename(img).split('.')[0]

    output_path_local = os.path.join(OUTPUT_PATH, fileName)
    os.mkdir(output_path_local)

    tree = ET.parse(os.path.join(XML_BASE_FOLDER, xml))
    root = tree.getroot()

    if hole_image:
        width = root[1].attrib['imageWidth']
        height = root[1].attrib['imageHeight']
        bb_coords = ['1,1', str(width) + ",1", str(width) + "," + str(height), "1," + str(height)]
    else:
        bb_coords = root[1][0][0].attrib['points'].split(" ")


    url = "http://divaservices.unifr.ch/api/v2/segmentation/seamcarvingtextlineextraction/1"

    payload = "{\"parameters\": {\"highlighter\": {\"type\": \"rectangle\",\"closed\": true," \
              "\"segments\": [[" + bb_coords[0] + "], [" + bb_coords[1] + "], [" + bb_coords[2] + "], [" + bb_coords[3] + "]]}" \
              ",\"smooth\": 0.0003,\"slices\": 4,\"sigma\": 3}," \
              "\"data\": [{\"inputImage\": \"" + DS_COLLECTION_NAME + "/" + img + "\"}]}"

    headers = {'content-type': 'application/json'}

    answer = requests.request("POST", url, data=payload, headers=headers)

    json_data = json.loads(answer.text)
    result_link = json_data['results'][0]['resultLink']

    try:
        result = pollResult(result_link)
        saveFile(result['output'][0]['file']['url'], "polygons_" + fileName + ".json", output_path_local)
        saveFile(result['output'][1]['file']['url'], "visualization_" + fileName + ".png", output_path_local)
    except:
        print("FAIL")


if __name__ == '__main__':
    """
        DO NOT FORGET TO UPLOAD THE DATASET ON DS
        DO NOT FORGET TO SET THE RIGHT COLLECTION NAME
    """

    die_file_img = 'e-codices_fmb-cb-0055_0109r_max_output' + '.png'
    die_file_xml = 'e-codices_fmb-cb-0055_0109r_max_gt' + '.xml'

    if not os.path.exists(OUTPUT_PATH):
        os.makedirs(os.path.join(OUTPUT_PATH))
    else:
        for the_file in os.listdir(OUTPUT_PATH):
            file_path = os.path.join(OUTPUT_PATH, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            except Exception as e:
                print(e)

    image_list, xml_list = load_files()

    # execute(die_file_img, die_file_xml, True)

    pool = Pool(processes=cpu_count())

    # For each file run
    pool.starmap(execute, zip(image_list, xml_list, itertools.repeat(False)))
    pool.close()
    print("Pool closed)")